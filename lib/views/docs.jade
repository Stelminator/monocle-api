-
    mockValue = function(details) {
        if (details.hasOwnProperty('sample')) {
            return details.sample;
        }
        switch (details.type) {
            case 'string':
                return 'FPO string';

            case 'integer':
            case 'number':
                var min = parseInt(details.minimum);
                var max = parseInt(details.maximum);
                if (isNaN(min) && isNaN(max)) return 123;
                if (isNaN(min) && !isNaN(max)) return max;
                if (!isNaN(min) && isNaN(max)) return min;
                return Math.ceil(Math.random() * ((max || 100) - min)) + min;

            case 'boolean':
                return true;

            case 'array':
                return [mockValue(details.items)];

            case 'null':
                return null;

            case 'object':
                var mock = {};
                for (var prop in details.properties) {
                    if (!details.properties.hasOwnProperty(prop)) {
                        continue;
                    }
                    mock[prop] = mockValue(details.properties[prop])
                }
                return mock;

            default:
                return '/*  type: ' + details.type + ' */';
        }
    }

mixin props(properties)
    ul.properties
        each details, property in properties
            -
                meta = Object.keys(details).filter(function(key) {
                    return -1 === ['description', 'type'].indexOf(key);
                })

            li.property
                div.property-name
                    span.name= property
                div.property-properties
                    span.type(class="type-#{details.type}")= details.type
                    if details.readOnly
                        span.read-only(title="Read-only access") R
                    else
                        span.read-write(title="Read and write access") W

                p.description= details.description

                if details.type == 'object'
                    +props(details.properties)

                if details.type == 'array'
                    +props(details.items.properties)

                else if meta.length
                    dl.meta
                        each key in meta
                            dt= key
                            if key === 'errorCodes'
                                dd= JSON.stringify(details[key], null, 2).slice(3, -2)
                            else
                                dd= details[key]

mixin resource(pattern, schema, methods, query)
    h2
        = schema.title || pattern
        span(class="type type-#{schema.type}")= schema.type

    if schema.description
        p= schema.description

    if pattern
        h3.pattern URL Pattern: <code>#{pattern}</code>

    if methods && methods.length
        h3.methods
            | Methods:
            each method in ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']
                if -1 !== methods.indexOf(method)
                    span.method(class="method-#{method.toLowerCase()}")= method

    if query
        h3.query
            | GET Query Parameters:
            each value, key in query
                span.query-param
                    = key
                    if value !== ''
                        span.query-param-default= ' (' + value + ')'

    if schema.properties
        h3 Properties:
        +props(schema.properties)

    if schema.items
        h3 Items:
        section.items
            +resource(null, schema.items, null)

doctype html
html
    head
        title Monocle API Documentation

    body
        style
            include styles.css

        header
            h1 Monocle API Documentation

        .index
            h2 Resources

            ul
                each route in routes
                    li: a(href="##{route.pattern}")= route.schema.title || route.pattern

        .resources
            each route in routes
                - pattern = route.pattern
                - schema = route.schema
                - methods = route.methods
                - query = route.query
                .resource(id=route.pattern)
                    +resource(pattern, schema, methods, query)

                    h3.sample Sample Response:
                    pre.response= JSON.stringify(mockValue(schema), null, 2)

                    div: a(href="#") Back to Top
